# azure-pipelines.yml
# Safe, read-only recon on Azure hosted agents (Linux + Windows)

trigger:
  - main
pr:
  - main

stages:
- stage: Probes
  displayName: "Azure Hosted Agent Recon (Safe)"
  jobs:

  # -------------------------------
  # Linux hosted agent (primary)
  # -------------------------------
  - job: linux_vm
    displayName: "Linux VM probes"
    pool:
      vmImage: 'ubuntu-22.04'

    steps:
      - bash: |
          set -euo pipefail
          echo "### Install tools"
          sudo apt-get update -qq
          sudo apt-get install -y -qq nmap netcat-traditional curl jq
          echo "Tools ready."
        displayName: "Install tools"

      - bash: |
          set -euo pipefail
          SUBNET=$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')
          GW=$(ip route | awk '/default/ {print $3; exit}')
          echo "Discovered subnet: $SUBNET"
          echo "Default gateway: $GW"

          # Export for later steps (Azure style)
          echo "##vso[task.setvariable variable=SUBNET]$SUBNET"
          echo "##vso[task.setvariable variable=GW]$GW"
        displayName: "Discover subnet & gateway"

      - bash: |
          set -euo pipefail
          PORTS=22,80,443,3306,5432,6379,2375,5000,8080,9200,15672
          echo "Scanning $(SUBNET) on {$PORTS}..."
          nmap -T4 -Pn --open -p "$PORTS" "$(SUBNET)" -oG scan.txt
          echo "### Nmap results"
          cat scan.txt
        displayName: "Network scan (expanded but safe)"

      - bash: |
          set -euo pipefail
          if [ -n "$(GW)" ]; then
            REG="http://$(GW):5000"
            echo "--- Probing for unauthenticated Docker Registry at $REG ---"
            curl -sS -i --max-time 5 \
              -H 'Accept: application/vnd.docker.distribution.manifest.v2+json' \
              "$REG/v2/" | tee v2-headers.txt | head -n 20 || true

            echo "--- Optional small catalog peek (still headers/body safe) ---"
            curl -sS -i --max-time 5 "$REG/v2/_catalog?n=5" | tee v2-catalog.txt | head -n 40 || true
          else
            echo "No gateway detected; skipping /v2/ probe."
            : > v2-headers.txt
            : > v2-catalog.txt
          fi
        displayName: "Gateway /v2/ check (no sidecar, no creds)"

      - bash: |
          set -euo pipefail
          echo "--- Azure IMDS instance probe ---"
          curl -s -m 3 -H "Metadata:true" \
            "http://169.254.169.254/metadata/instance?api-version=2021-02-01" \
            | head -n 20 || echo "No Azure IMDS (good)."
        displayName: "Azure IMDS probe (read-only)"

      - bash: |
          set -euo pipefail
          if grep -q '6379/open' scan.txt; then
            echo "Redis found in scan; installing redis-tools for PING only."
            sudo apt-get update -qq && sudo apt-get install -y -qq redis-tools
            for H in $(grep '6379/open' scan.txt | awk '{print $2}'); do
              echo "Pinging Redis on $H:6379 (no data access)"
              (redis-cli -h "$H" ping || true)
            done
          else
            echo "No Redis hosts found in this run."
          fi
        displayName: "Conditional Redis PING (no data access)"

      - bash: |
          set -euo pipefail
          echo "Collecting artifactsâ€¦"
          mkdir -p artifacts
          cp -f scan.txt artifacts/ 2>/dev/null || true
          cp -f v2-headers.txt artifacts/ 2>/dev/null || true
          cp -f v2-catalog.txt artifacts/ 2>/dev/null || true
          # Basic env snapshot (non-sensitive)
          (env | sort | sed -E 's/(SECRET|TOKEN|PASSWORD)=.*/\1=REDACTED/g') > artifacts/env.txt
          echo "Done."
        displayName: "Prepare artifacts"

      - task: PublishBuildArtifacts@1
        displayName: "Publish recon artifacts"
        condition: always()
        inputs:
          PathtoPublish: 'artifacts'
          ArtifactName: 'azure-recon-linux'
          publishLocation: 'Container'

  # -------------------------------
  # Windows hosted agent (quick probe)
  # -------------------------------
  - job: windows_vm
    displayName: "Windows VM gateway probe"
    pool:
      vmImage: 'windows-2022'

    steps:
      - powershell: |
          Set-StrictMode -Version Latest
          $route = Get-NetRoute -DestinationPrefix '0.0.0.0/0' |
                   Sort-Object RouteMetric, InterfaceMetric |
                   Select-Object -First 1
          $gw = $route.NextHop
          if ([string]::IsNullOrWhiteSpace($gw)) { $gw = '127.0.0.1' }
          Write-Host "Gateway: $gw"

          $ports = @(80,443,5000,8080)
          foreach ($p in $ports) {
            try {
              $c = New-Object System.Net.Sockets.TcpClient
              $iar = $c.BeginConnect($gw, [int]$p, $null, $null)
              if ($iar.AsyncWaitHandle.WaitOne(2000)) {
                $c.EndConnect($iar)
                if ($c.Connected) { Write-Host "open:$p" } else { Write-Host "closed:$p" }
              } else { Write-Host "closed:$p" }
              $c.Dispose()
            } catch {
              Write-Host "closed:$p"
            }
          }
        displayName: "Gateway probe (80/443/5000/8080)"
