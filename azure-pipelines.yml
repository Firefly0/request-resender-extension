# azure-pipelines.yml
trigger:
  - main
pr:
  - main

stages:
- stage: Probes
  displayName: "Azure Hosted Agent Recon (Safe)"
  jobs:

  # Linux VM job (primary recon)
  - job: linux_vm
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - bash: |
          set -euo pipefail
          echo "### Tools"
          sudo apt-get update -qq
          sudo apt-get install -y -qq nmap netcat-traditional curl jq
          echo "Tools ready."
        displayName: "Install tools"

      - bash: |
          set -euo pipefail
          SUBNET=$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')
          GW=$(ip route | awk '/default/ {print $3; exit}')
          echo "Discovered subnet: $SUBNET"
          echo "Default gateway: $GW"
          echo "SUBNET=$SUBNET" >> $GITHUB_ENV
          echo "GW=$GW" >> $GITHUB_ENV
        displayName: "Discover subnet & gateway"

      - bash: |
          set -euo pipefail
          PORTS=22,80,443,3306,5432,6379,2375,5000,8080,9200,15672
          echo "Scanning $SUBNET on {$PORTS}..."
          nmap -T4 -Pn --open -p "$PORTS" "$SUBNET" -oG scan.txt
          echo "### Nmap results"
          cat scan.txt
        env:
          SUBNET: $(SUBNET)
        displayName: "Network scan (expanded but safe)"

      - bash: |
          set -euo pipefail
          REG="http://${GW}:5000"
          echo "--- Probing for unauthenticated Docker Registry at $REG ---"
          # Only probe real gateway. DO NOT start your own registry sidecar.
          curl -sS -i --max-time 5 "$REG/v2/" || true
          # If /v2/ looks alive, try a tiny catalog sample w/ short timeout.
          curl -sS -i --max-time 5 "$REG/v2/_catalog?n=5" || true
        env:
          GW: $(GW)
        displayName: "Gateway /v2/ check (no sidecar, no creds)"

      - bash: |
          set -euo pipefail
          echo "--- Azure IMDS instance probe ---"
          curl -s -m 3 -H "Metadata:true" \
            "http://169.254.169.254/metadata/instance?api-version=2021-02-01" \
            | head -n 20 || echo "No Azure IMDS (good)."
        displayName: "Azure IMDS probe (read-only)"

      - bash: |
          set -euo pipefail
          if grep -q '6379/open' scan.txt; then
            sudo apt-get update -qq && sudo apt-get install -y -qq redis-tools
            for H in $(grep '6379/open' scan.txt | awk '{print $2}'); do
              echo "Pinging Redis on $H:6379 (no data access)"
              (redis-cli -h "$H" ping || true)
            done
          else
            echo "No Redis hosts found in this run."
          fi
        displayName: "Conditional Redis PING (no data access)"

      - task: PublishBuildArtifacts@1
        displayName: "Publish recon artifacts"
        condition: always()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)'
          ArtifactName: 'azure-recon'
          publishLocation: 'Container'

  # Optional: Windows VM quick port probe of gateway
  - job: windows_vm
    pool:
      vmImage: 'windows-2022'
    steps:
      - powershell: |
          Set-StrictMode -Version Latest
          $gw = (Get-NetRoute -DestinationPrefix '0.0.0.0/0' |
                 Sort-Object RouteMetric, InterfaceMetric |
                 Select-Object -First 1).NextHop
          if ([string]::IsNullOrWhiteSpace($gw)) { $gw = '127.0.0.1' }
          $ports = @(80,443,5000,8080)
          Write-Host "Gateway: $gw"
          foreach ($p in $ports) {
            try {
              $c = New-Object System.Net.Sockets.TcpClient
              $iar = $c.BeginConnect($gw, [int]$p, $null, $null)
              if ($iar.AsyncWaitHandle.WaitOne(2000)) {
                $c.EndConnect($iar)
                if ($c.Connected) { Write-Host "open:$p" } else { Write-Host "closed:$p" }
              } else { Write-Host "closed:$p" }
              $c.Dispose()
            } catch { Write-Host "closed:$p" }
          }
        displayName: "Windows VM gateway probe (80/443/5000/8080)"
