trigger: none
pr: none

name: 'gateway-probe-$(Date:yyyyMMdd)$(Rev:.r)'

stages:
- stage: Probe
  displayName: Gateway Probes
  jobs:

  # 1) Linux VM (no installs)
  - job: Linux_VM_GatewayProbe
    displayName: Linux (VM) gateway probe
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - bash: |
        set -Eeuo pipefail

        GWH="$(awk '$1!="Iface" && $2=="00000000" {print $3; exit}' /proc/net/route || true)"
        hex2ip() { printf "%d.%d.%d.%d" 0x${1:6:2} 0x${1:4:2} 0x${1:2:2} 0x${1:0:2}; }
        GW="$( [ -n "${GWH:-}" ] && hex2ip "$GWH" || true )"
        if [ -z "${GW:-}" ]; then
          GW="$(ip route 2>/dev/null | awk '/default/ {print $3; exit}')"
        fi
        echo "GW=$GW"

        check_port() {
          local p="$1"
          if timeout 1 bash -lc "exec 3<>/dev/tcp/$GW/$p" 2>/dev/null; then
            echo "open:$p"; exec 3>&- 3<&- || true
          else
            echo "closed:$p"
          fi
        }

        http_v2() {
          local host="$1" port="$2"
          if timeout 2 bash -lc "exec 3<>/dev/tcp/$host/$port" 2>/dev/null; then
            printf 'GET /v2/ HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n' "$host" >&3
            head -n1 <&3 || true
            exec 3>&- 3<&- || true
          else
            echo "connection-refused"
          fi
        }

        RESULTS="$(mktemp)"
        {
          echo "## Linux (VM) gateway probe"
          echo
          echo "**Gateway:** $GW"
          echo
          echo "**Ports:**"
          for p in 5000 5001 2375 2376 80 443 8080; do
            echo "- $(check_port "$p")"
          done
          echo
          echo "--- HTTP /v2/ ---"
          http_v2 "$GW" 5000
          echo
          echo "--- HTTPS /v2/ ---"
          if timeout 2 bash -lc "exec 3<>/dev/tcp/$GW/5001" 2>/dev/null; then
            echo "tcp open (TLS not inspected)"; exec 3>&- 3<&- || true
          else
            echo "connection-refused"
          fi
          echo
        } >"$RESULTS"

        mkdir -p "$(Build.ArtifactStagingDirectory)"
        cp "$RESULTS" "$(Build.ArtifactStagingDirectory)/summary.md"
        cat "$(Build.ArtifactStagingDirectory)/summary.md"
      displayName: Probe (VM)
    - task: PublishBuildArtifacts@1
      displayName: Publish VM summary
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'LinuxVM_Probe'
        publishLocation: 'Container'

  # 2) Windows VM
  - job: Windows_VM_GatewayProbe
    displayName: Windows (VM) gateway probe
    pool: { vmImage: 'windows-latest' }
    steps:
    - powershell: |
        $ErrorActionPreference = 'Stop'

        function Get-DefaultGateway {
          $gw = (Get-NetRoute -DestinationPrefix '0.0.0.0/0' -ErrorAction SilentlyContinue |
                 Sort-Object RouteMetric, InterfaceMetric |
                 Select-Object -First 1).NextHop
          if (-not $gw) {
            $gw = (Get-NetIPConfiguration | Where-Object { $_.IPv4DefaultGateway } |
                   Select-Object -First 1).IPv4DefaultGateway.NextHop
          }
          $gw
        }

        function Test-Port {
          param([string]$Host,[int]$Port,[int]$TimeoutMs=1000)
          try {
            $c = New-Object System.Net.Sockets.TcpClient
            $iar = $c.BeginConnect($Host,$Port,$null,$null)
            if (-not $iar.AsyncWaitHandle.WaitOne($TimeoutMs)) { $c.Close(); return "closed:$Port" }
            $c.EndConnect($iar); $c.Close(); "open:$Port"
          } catch { "closed:$Port" }
        }

        $gw = Get-DefaultGateway
        Write-Host "GW=$gw"

        $lines = [System.Collections.Generic.List[string]]::new()
        $lines.Add("## Windows (VM) gateway probe")
        $lines.Add("")
        $lines.Add("**Gateway:** $gw")
        $lines.Add("")
        $lines.Add("**Ports:**")
        foreach ($p in 5000,5001,2375,2376,80,443,8080) { $lines.Add("- " + (Test-Port $gw $p 1000)) }

        $lines.Add("")
        $lines.Add("--- HTTP /v2/ ---")
        try {
          $resp = Invoke-WebRequest -UseBasicParsing -Uri ("http://{0}:5000/v2/" -f $gw) -TimeoutSec 2
          $lines.Add(("HTTP/{0} {1}" -f $resp.ProtocolVersion, [int]$resp.StatusCode))
        } catch { $lines.Add("connection-refused") }

        $lines.Add("")
        $lines.Add("--- HTTPS /v2/ ---")
        try {
          # Ignore TLS errors (self-signed, etc.) without embedding C#
          [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }
          $resp2 = Invoke-WebRequest -UseBasicParsing -Uri ("https://{0}:5001/v2/" -f $gw) -TimeoutSec 2 -ErrorAction Stop
          $lines.Add(("HTTP/{0} {1}" -f $resp2.ProtocolVersion, [int]$resp2.StatusCode))
        } catch { $lines.Add("connection-refused") } finally {
          [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $null
        }

        $outDir = "$(Build.ArtifactStagingDirectory)".Replace("\","/")
        New-Item -ItemType Directory -Force -Path $outDir | Out-Null
        $summary = Join-Path $outDir 'summary.md'
        $lines | Out-File -FilePath $summary -Encoding utf8
        Get-Content $summary | Write-Host
      displayName: Probe (VM)
    - task: PublishBuildArtifacts@1
      displayName: Publish VM summary
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'WindowsVM_Probe'
        publishLocation: 'Container'

  # 3) Linux CONTAINER (no root, no sudo)
  - job: Linux_Container_GatewayProbe_NoRoot
    displayName: Linux (container) gateway probe (no-root)
    pool: { vmImage: 'ubuntu-latest' }
    container: { image: 'ubuntu:24.04' }
    steps:
    - bash: |
        set -Eeuo pipefail

        GWH="$(awk '$1!="Iface" && $2=="00000000" {print $3; exit}' /proc/net/route || true)"
        hex2ip() { printf "%d.%d.%d.%d" 0x${1:6:2} 0x${1:4:2} 0x${1:2:2} 0x${1:0:2}; }
        GW="$( [ -n "${GWH:-}" ] && hex2ip "$GWH" || true )"
        if [ -z "${GW:-}" ]; then
          GW="$(ip route 2>/dev/null | awk '/default/ {print $3; exit}')"
        fi
        echo "GW=$GW"

        check_port() {
          local p="$1"
          if timeout 1 bash -lc "exec 3<>/dev/tcp/$GW/$p" 2>/dev/null; then
            echo "open:$p"; exec 3>&- 3<&- || true
          else
            echo "closed:$p"
          fi
        }

        http_v2() {
          local host="$1" port="$2"
          if timeout 2 bash -lc "exec 3<>/dev/tcp/$host/$port" 2>/dev/null; then
            printf 'GET /v2/ HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n' "$host" >&3
            head -n1 <&3 || true
            exec 3>&- 3<&- || true
          else
            echo "connection-refused"
          fi
        }

        RESULTS="$(mktemp)"
        {
          echo "## Linux (container) gateway probe (pure bash)"
          echo
          echo "**Gateway:** $GW"
          echo
          echo "**Ports:**"
          for p in 5000 5001 2375 2376 80 443 8080; do
            echo "- $(check_port "$p")"
          done
          echo
          echo "--- HTTP /v2/ ---"
          http_v2 "$GW" 5000
          echo
          echo "--- HTTPS /v2/ ---"
          if timeout 2 bash -lc "exec 3<>/dev/tcp/$GW/5001" 2>/dev/null; then
            echo "tcp open (TLS not inspected)"; exec 3>&- 3<&- || true
          else
            echo "connection-refused"
          fi
          echo
          echo "--- identity ---"
          id
          echo
        } >"$RESULTS"

        mkdir -p "$(Build.ArtifactStagingDirectory)"
        cp "$RESULTS" "$(Build.ArtifactStagingDirectory)/summary.md"
        cat "$(Build.ArtifactStagingDirectory)/summary.md"
      displayName: Probe (container, pure bash)
      continueOnError: true
    - task: PublishBuildArtifacts@1
      displayName: Publish container summary
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'LinuxContainer_Probe'
        publishLocation: 'Container'

  # 4) Sanity: run a real registry as a sidecar on the VM
  - job: Sanity_ServiceRegistry
    displayName: Sanity check (sidecar registry)
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - bash: |
        set -Eeuo pipefail
        docker run -d --rm --name reg -p 5000:5000 registry:2
        for i in {1..10}; do
          if curl -fsS --max-time 1 -I http://127.0.0.1:5000/v2/ >/dev/null 2>&1; then break; fi
          sleep 1
        done

        RESULTS="$(mktemp)"
        {
          echo "## Sanity: sidecar docker registry"
          echo
          echo "**Service:** localhost:5000"
          echo
          echo "--- HTTP /v2/ ---"
          set +e
          curl -fsS -I --max-time 2 http://127.0.0.1:5000/v2/ | head -n1 || echo "connection-refused"
          set -e
          echo
        } >"$RESULTS"

        mkdir -p "$(Build.ArtifactStagingDirectory)"
        cp "$RESULTS" "$(Build.ArtifactStagingDirectory)/summary.md"
        cat "$(Build.ArtifactStagingDirectory)/summary.md"
      displayName: Probe (service registry)
    - bash: docker stop reg
      displayName: Stop registry
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: Publish sanity summary
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Sanity_ServiceRegistry'
        publishLocation: 'Container'

  # 5) Final summary
  - job: Summary
    displayName: Final PASS/FAIL summary
    dependsOn:
      - Linux_VM_GatewayProbe
      - Windows_VM_GatewayProbe
      - Linux_Container_GatewayProbe_NoRoot
      - Sanity_ServiceRegistry
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: Download all probe artifacts
      inputs:
        buildType: 'current'
        downloadPath: '$(Pipeline.Workspace)/probe_artifacts'

    - bash: |
        set -Eeuo pipefail
        ROOT="$(Pipeline.Workspace)/probe_artifacts"
        OUT="$(Build.SourcesDirectory)/combined-summary.md"

        echo "# Gateway Probe Summary" > "$OUT"
        echo >> "$OUT"
        echo "_Run: $(Build.BuildNumber) | $(Build.SourceBranchName)_" >> "$OUT"
        echo >> "$OUT"

        for A in LinuxVM_Probe WindowsVM_Probe LinuxContainer_Probe Sanity_ServiceRegistry; do
          if [ -f "$ROOT/$A/summary.md" ]; then
            echo "## $A" >> "$OUT"
            cat "$ROOT/$A/summary.md" >> "$OUT"
            echo >> "$OUT"
          fi
        done

        found_open5000=$(grep -R "open:5000" "$ROOT" || true)
        found_http=$(grep -R "HTTP/1\." "$ROOT" | grep -Ei "/v2/" || true)

        STATUS="PASS"
        NOTE="No container registry detected on the gateway (ports closed or refused)."
        if [ -n "$found_open5000" ] && [ -n "$found_http" ]; then
          STATUS="FAIL"
          NOTE="Possible registry endpoint on the gateway (5000 responded to /v2/)."
        fi

        echo "**Result:** \`$STATUS\` — $NOTE" | tee -a "$OUT"
        echo >> "$OUT"
        echo "---" >> "$OUT"
        echo "_Sanity job should show an HTTP status from the local registry; if not, probe logic is suspect._" >> "$OUT"

        echo "##vso[task.uploadsummary]$OUT"
        echo; echo "===== SUMMARY ====="; cat "$OUT"
      displayName: Build and publish combined summary
