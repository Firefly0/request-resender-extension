# azure-pipelines.yml
trigger:
- main

pr:
- main

variables:
  # Override these at queue time if you like.
  targetHost: ''                  # If empty, each job auto-detects the default gateway.
  servicePorts: '80 443 5000 8080'
  tcpTimeoutSeconds: '2'          # 1–3 is a good range

stages:
# ────────────────────────────────────────────────────────────────────────────
# 1) Sanity: sidecar docker registry (Ubuntu VM)
# ────────────────────────────────────────────────────────────────────────────
- stage: Sanity_Sidecar_Registry
  displayName: "Sanity: sidecar docker registry"
  jobs:
  - job: SanityRegistry
    displayName: "Probe (service registry)"
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Bash@3
      name: SanityProbe
      displayName: "Start registry:2 and probe GET /v2/"
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          set -u
          ART_DIR="$(Build.ArtifactStagingDirectory)/Sanity_ServiceRegistry"
          mkdir -p "$ART_DIR"

          echo "## Sanity: sidecar docker registry" | tee "$ART_DIR/summary.txt"
          echo | tee -a "$ART_DIR/summary.txt"

          # Start a local Docker registry (ephemeral)
          CONTAINER_NAME="reg_sanity_$RANDOM"
          docker run -d --rm --name "$CONTAINER_NAME" -p 5000:5000 registry:2 >/dev/null

          # Give it a moment to start
          for i in 1 2 3 4 5; do
            if curl -fsS http://localhost:5000/v2/ >/dev/null 2>&1; then break; fi
            sleep 1
          done

          echo "**Service:** localhost:5000" | tee -a "$ART_DIR/summary.txt"
          echo | tee -a "$ART_DIR/summary.txt"
          echo "--- HTTP /v2/ ---" | tee -a "$ART_DIR/summary.txt"

          set +e
          HTTP_OUT="$(curl -i -s http://localhost:5000/v2/ || true)"
          set -e
          echo "$HTTP_OUT" | tee -a "$ART_DIR/summary.txt"

          # Stop the container if it’s still running
          docker ps --format '{{.Names}}' | grep -qx "$CONTAINER_NAME" && docker stop "$CONTAINER_NAME" >/dev/null || true

    - task: PublishBuildArtifacts@1
      displayName: "Publish sanity summary"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/Sanity_ServiceRegistry'
        ArtifactName: 'Sanity_ServiceRegistry'
        publishLocation: 'Container'

# ────────────────────────────────────────────────────────────────────────────
# 2) Windows VM probe (PowerShell) — fixed port casting
# ────────────────────────────────────────────────────────────────────────────
- stage: Windows_VM_Probe
  displayName: "Windows (VM) probe"
  dependsOn: Sanity_Sidecar_Registry
  jobs:
  - job: WinProbe
    displayName: "Probe (VM)"
    pool:
      vmImage: windows-latest
    steps:
    - checkout: self

    - task: PowerShell@2
      name: WinGatewayProbe
      displayName: "TCP port probe (Windows VM)"
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          $ErrorActionPreference = 'Continue'

          function Test-TcpPort {
            param(
              [Parameter(Mandatory)][string]$Address,
              [Parameter(Mandatory)][int]$Port,
              [int]$TimeoutMs = 1000
            )
            $client = New-Object System.Net.Sockets.TcpClient
            try {
              $ar = $client.BeginConnect($Address, $Port, $null, $null)
              if (-not $ar.AsyncWaitHandle.WaitOne($TimeoutMs)) {
                $client.Close()
                return $false
              }
              $client.EndConnect($ar) | Out-Null
              $client.Close()
              return $true
            } catch {
              try { $client.Close() } catch {}
              return $false
            }
          }

          $outDir = "$(Build.ArtifactStagingDirectory)\WindowsVM_Probe"
          New-Item -Force -ItemType Directory -Path $outDir | Out-Null
          $out = Join-Path $outDir 'summary.txt'

          # Determine target
          $TargetHost = "$(targetHost)".Trim()
          if (-not $TargetHost) {
            try {
              $TargetHost = (Get-NetRoute -DestinationPrefix '0.0.0.0/0' |
                Sort-Object RouteMetric |
                Select-Object -First 1).NextHop
            } catch {
              $TargetHost = '127.0.0.1'
            }
          }

          # Ports (cast correctly)
          $portsRaw = "$(servicePorts)"
          if (-not $portsRaw) { $portsRaw = "80 443 5000 8080" }
          $ports = ($portsRaw -replace '[,;]', ' ').Split(' ', [System.StringSplitOptions]::RemoveEmptyEntries) |
            ForEach-Object { [int]$_ }

          $timeoutMs = [int](1000 * [int]"$(tcpTimeoutSeconds)")

          "**Windows VM gateway probe`n" | Set-Content $out
          "**Target:** $TargetHost`n" | Add-Content $out
          "**Ports:**" | Add-Content $out

          foreach ($p in $ports) {
            # NOTE: the cast must happen *before* binding to -Port
            if (Test-TcpPort -Address $TargetHost -Port $([int]$p) -TimeoutMs $timeoutMs) {
              Add-Content $out ("- open:{0}" -f $p)
            } else {
              Add-Content $out ("- closed:{0}" -f $p)
            }
          }

    - task: PublishBuildArtifacts@1
      displayName: "Publish Windows VM summary"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/WindowsVM_Probe'
        ArtifactName: 'WindowsVM_Probe'
        publishLocation: 'Container'

# ────────────────────────────────────────────────────────────────────────────
# 3) Linux container probe (no ip(8) dependency) — uses /proc/net/route
# ────────────────────────────────────────────────────────────────────────────
- stage: Linux_Container_Probe
  displayName: "Linux (container) probe (no-root)"
  dependsOn: Windows_VM_Probe
  jobs:
  - job: LxContainerProbe
    displayName: "Probe (container, pure bash)"
    pool:
      vmImage: ubuntu-latest
    container: 'ubuntu:24.04'
    steps:
    - checkout: self

    - task: Bash@3
      name: LxContainerGatewayProbe
      displayName: "TCP port probe (container)"
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          set -u

          ART_DIR="$(Build.ArtifactStagingDirectory)/LinuxContainer_Probe"
          mkdir -p "$ART_DIR"
          OUT="$ART_DIR/summary.txt"

          echo "## Linux (container) gateway probe" > "$OUT"

          TARGET_HOST="${targetHost}"
          if [ -z "${TARGET_HOST}" ]; then
            # Read default gateway from /proc/net/route (no iproute2 required)
            hex=$(awk '$2=="00000000"{print $3; exit}' /proc/net/route || true)
            if [ -n "${hex:-}" ]; then
              a=$((16#${hex:6:2})); b=$((16#${hex:4:2})); c=$((16#${hex:2:2})); d=$((16#${hex:0:2}))
              TARGET_HOST="${a}.${b}.${c}.${d}"
              MODE="gateway"
            else
              TARGET_HOST="127.0.0.1"
              MODE="fallback"
            fi
          else
            MODE="target"
          fi

          echo "" >> "$OUT"
          echo "**Target:** ${TARGET_HOST} (${MODE})" >> "$OUT"
          echo "" >> "$OUT"
          echo "**Ports:**" >> "$OUT"

          PORTS="$(echo "$(servicePorts)" | tr ',;' ' ')"
          [ -n "$PORTS" ] || PORTS="80 443 5000 8080"
          TCP_TIMEOUT="${tcpTimeoutSeconds:-2}"

          # Check ports with a timeout to avoid hangs
          for p in $PORTS; do
            echo "- checking:$p" 1>&2
            if timeout "$TCP_TIMEOUT" bash -lc "exec 3<>/dev/tcp/${TARGET_HOST}/${p}" 2>/dev/null; then
              echo "- open:$p" >> "$OUT"
            else
              echo "- closed:$p" >> "$OUT"
            fi
            exec 3>&- 3<&- || true
          done

    - task: PublishBuildArtifacts@1
      displayName: "Publish container summary"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/LinuxContainer_Probe'
        ArtifactName: 'LinuxContainer_Probe'
        publishLocation: 'Container'

# ────────────────────────────────────────────────────────────────────────────
# 4) Linux VM probe (Ubuntu host) — add timeouts to avoid hangs
# ────────────────────────────────────────────────────────────────────────────
- stage: Linux_VM_Probe
  displayName: "Linux (VM) probe"
  dependsOn: Linux_Container_Probe
  jobs:
  - job: LxVMProbe
    displayName: "Probe (VM)"
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Bash@3
      name: LxVMGatewayProbe
      displayName: "TCP port probe (Linux VM)"
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          set -u

          ART_DIR="$(Build.ArtifactStagingDirectory)/LinuxVM_Probe"
          mkdir -p "$ART_DIR"
          OUT="$ART_DIR/summary.txt"

          echo "## Linux (VM) gateway probe" > "$OUT"

          TARGET_HOST="${targetHost}"
          if [ -z "${TARGET_HOST}" ]; then
            # Use /proc/net/route to avoid relying on 'ip'
            hex=$(awk '$2=="00000000"{print $3; exit}' /proc/net/route || true)
            if [ -n "${hex:-}" ]; then
              a=$((16#${hex:6:2})); b=$((16#${hex:4:2})); c=$((16#${hex:2:2})); d=$((16#${hex:0:2}))
              TARGET_HOST="${a}.${b}.${c}.${d}"
              MODE="gateway"
            else
              TARGET_HOST="127.0.0.1"
              MODE="fallback"
            fi
          else
            MODE="target"
          fi

          echo "" >> "$OUT"
          echo "**Target:** ${TARGET_HOST} (${MODE})" >> "$OUT"
          echo "" >> "$OUT"
          echo "**Ports:**" >> "$OUT"

          PORTS="$(echo "$(servicePorts)" | tr ',;' ' ')"
          [ -n "$PORTS" ] || PORTS="80 443 5000 8080"
          TCP_TIMEOUT="${tcpTimeoutSeconds:-2}"

          # Safe, non-hanging TCP checks
          for p in $PORTS; do
            echo "- checking:$p" 1>&2
            if timeout "$TCP_TIMEOUT" bash -lc "exec 3<>/dev/tcp/${TARGET_HOST}/${p}" 2>/dev/null; then
              echo "- open:$p" >> "$OUT"
            else
              echo "- closed:$p" >> "$OUT"
            fi
            exec 3>&- 3<&- || true
          done

    - task: PublishBuildArtifacts@1
      displayName: "Publish Linux VM summary"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/LinuxVM_Probe'
        ArtifactName: 'LinuxVM_Probe'
        publishLocation: 'Container'
