# azure-pipelines.yml
trigger: none
pr: none

# NOTE: This pipeline is intentionally scoped to the current VM and its default gateway
# to stay within Microsoft ROE. Do not broaden without explicit permission.

stages:
# =========================
# Linux Hosted Agent Recon
# =========================
- stage: ReconLinux
  displayName: Linux VM probes (safe & scoped)
  pool:
    vmImage: 'ubuntu-22.04'
  jobs:
  - job: linux_recon
    displayName: Linux VM probes
    steps:
    - checkout: self

    - task: Bash@3
      displayName: Install tools (quiet)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "### Install tools"
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -qq \
            nmap netcat-openbsd curl jq dnsutils redis-tools whois

    - task: Bash@3
      displayName: Discover host & gateway
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          HOST_IP="$(hostname -I | awk '{print $1}')"
          SUBNET="$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')"
          GW="$(ip route | awk '/default/ {print $3}' | head -n1)"
          {
            echo "Host IP: ${HOST_IP:-unknown}"
            echo "Subnet: ${SUBNET:-unknown}"
            echo "Default gateway: ${GW:-unknown}"
          } | tee artifacts/net-basics.txt

    - task: Bash@3
      displayName: Local routes / neigh / DNS (read-only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          {
            echo "### ip neigh"
            ip neigh || true
            echo
            echo "### ip route"
            ip route || true
            echo
            echo "### resolv.conf (first 50 lines)"
            sed -n '1,50p' /etc/resolv.conf || true
            echo
            echo "### hosts (first 80 lines)"
            sed -n '1,80p' /etc/hosts || true
            echo
            echo "### hostname -f"
            hostname -f || true
          } > artifacts/local-network-view.txt

    - task: Bash@3
      displayName: Focused network scan (host + gateway only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          HOST_IP="$(hostname -I | awk '{print $1}')"
          GW="$(ip route | awk '/default/ {print $3}' | head -n1)"
          PORTS="22,80,443,3306,5432,5601,5672,15672,2375,2376,2379,2380,5000,8080,8081,8500,8443,9200,9300,10250,10255,3000,50070"

          echo "Scanning $HOST_IP and $GW on {$PORTS}..." | tee artifacts/scan.txt
          nmap -T4 -n --open --max-retries 1 --host-timeout 10s -p "$PORTS" \
            "$HOST_IP" ${GW:+$GW} -oG artifacts/scan.gnmap || true

          echo "---- Open hosts summary ----" | tee -a artifacts/scan.txt
          awk '/Ports: /{print $2" "$0}' artifacts/scan.gnmap | tee -a artifacts/scan.txt

    - task: Bash@3
      displayName: HTTP HEAD/OPTIONS probe (host+GW if HTTP-ish)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          out="artifacts/http-headers-cors.txt"
          : > "$out"

          # Collect any hosts (host or gateway) that showed HTTP-ish ports in the scan
          mapfile -t http_hosts < <(grep -E ' (80|443|8080|8081|8443)/open' artifacts/scan.gnmap | awk '{print $2}' | sort -u || true)

          if [ "${#http_hosts[@]}" -eq 0 ]; then
            echo "No HTTP-ish hosts found." | tee "$out"
          else
            for H in "${http_hosts[@]}"; do
              {
                echo "== Target: $H =="
                echo "--- HEAD http://$H/ (5s)"
                curl -sS -I --max-time 5 "http://$H/" | head -n 40 || true
                echo
                echo "--- OPTIONS http://$H/ (CORS check)"
                curl -sS -X OPTIONS -I --max-time 5 "http://$H/" | grep -Ei 'access-control-allow|allow:|server:' || true
                echo
                echo "--- HEAD https://$H/ (if TLS terminates)"
                curl -sS -I -k --max-time 5 "https://$H/" | head -n 40 || true
                echo
              } >> "$out"
            done
          fi

    - task: Bash@3
      displayName: Azure IMDS probe (read-only + token endpoint status-only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          {
            echo "### Instance metadata (first 50 lines)"
            (curl -s -m 3 -H "Metadata:true" \
              "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | head -n 50) || echo "No IMDS."
            echo
            echo "### Managed Identity token endpoint STATUS ONLY (with header)"
            RESP="$(curl -s -m 3 -i -H "Metadata:true" \
              "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F" || true)"
            CODE="$(printf "%s" "$RESP" | awk 'NR==1{print $2}')"
            BODYLEN="$(printf "%s" "$RESP" | tail -n +2 | wc -c | awk "{print \$1}")"
            echo "HTTP status: ${CODE:-unknown}, body-bytes: ${BODYLEN:-0}"
            echo
            echo "### Token endpoint STATUS ONLY (without header; should fail)"
            RESP2="$(curl -s -m 3 -i \
              "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F" || true)"
            CODE2="$(printf "%s" "$RESP2" | awk 'NR==1{print $2}')"
            BODYLEN2="$(printf "%s" "$RESP2" | tail -n +2 | wc -c | awk "{print \$1}")"
            echo "HTTP status (no header): ${CODE2:-unknown}, body-bytes: ${BODYLEN2:-0}"
          } > artifacts/imds-azure.txt

    - task: Bash@3
      displayName: Isolation probes (docker/containerd presence & perms)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          {
            echo "### docker socket"
            ls -l /var/run/docker.sock 2>&1 || true
            echo
            echo "### docker info (5s timeout)"
            timeout 5s docker info 2>&1 || echo "docker info not available or times out (expected on hosted)."
            echo
            echo "### containerd socket"
            ls -l /run/containerd/containerd.sock 2>&1 || true
            echo
            echo "### ctr version (5s timeout)"
            timeout 5s ctr --version 2>&1 || echo "ctr not present or no access (expected)."
          } > artifacts/isolation-probes.txt

    - task: Bash@3
      displayName: Egress posture check (status-only, low-noise)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          OUT="artifacts/egress-linux.txt"
          : > "$OUT"

          check() {
            local url="$1"
            local note="$2"
            # print: URL | HTTP_CODE | BYTES | TOTAL_TIME
            read -r CODE BYTES TIME < <(curl -sS -m 5 -o /dev/null -w "%{http_code} %{size_download} %{time_total}" "$url" || echo "000 0 0")
            printf "%-40s | code=%-3s bytes=%-8s time=%ss\n" "$note" "$CODE" "$BYTES" "$TIME" >> "$OUT"
          }

          check "https://management.azure.com/"   "HTTPS mgmt endpoint"
          check "https://example.com/"            "HTTPS example.com"
          check "http://1.1.1.1"                  "HTTP to 1.1.1.1"
          check "http://169.254.169.254/"         "HTTP IMDS root (no header)"

    - task: Bash@3
      displayName: Prepare artifacts
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "Collecting artifactsâ€¦"
          ls -lah artifacts || true
          echo "Done."

    - task: PublishBuildArtifacts@1
      displayName: Publish recon artifacts (Linux)
      inputs:
        PathtoPublish: 'artifacts'
        ArtifactName: 'azure-recon-linux'
        publishLocation: 'Container'

# =========================
# Windows Hosted Agent Recon
# =========================
- stage: ReconWindows
  displayName: Windows VM gateway probe (safe & scoped)
  pool:
    vmImage: 'windows-2022'
  jobs:
  - job: win_probe
    displayName: Windows VM gateway probe
    steps:
    - checkout: self

    - task: PowerShell@2
      displayName: Gateway probe (80/443/5000/8080)
      inputs:
        targetType: inline
        script: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $gw = (Get-NetRoute -DestinationPrefix "0.0.0.0/0" | Sort-Object RouteMetric | Select-Object -First 1).NextHop
          "Gateway: $gw" | Tee-Object -FilePath artifacts\win-gateway.txt
          foreach ($p in 80,443,5000,8080) {
            $res = Test-NetConnection -ComputerName $gw -Port $p -WarningAction SilentlyContinue
            $state = if ($res.TcpTestSucceeded) { "open" } else { "closed" }
            "$($state):$p" | Tee-Object -FilePath artifacts\win-gateway.txt -Append
          }

    - task: PowerShell@2
      displayName: Local routes/ARP/DNS (Windows)
      inputs:
        targetType: inline
        script: |
          $o = @()
          $o += "### route print"
          $o += (route print | Out-String)
          $o += "`n### arp -a"
          $o += (arp -a | Out-String)
          $o += "`n### DNS servers"
          $o += (Get-DnsClientServerAddress | Format-Table -AutoSize | Out-String)
          $o -join "`n" | Set-Content -Path artifacts\win-local.txt -Encoding UTF8

    # NEW: Windows IMDS status-only probe (with/without header)
    - task: PowerShell@2
      displayName: Azure IMDS probe (Windows; status-only)
      inputs:
        targetType: inline
        script: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $urlInstance = "http://169.254.169.254/metadata/instance?api-version=2021-02-01"
          $urlToken    = "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F"

          function CurlStatus([string]$Url, [bool]$WithHeader) {
            $hdr = $WithHeader ? "-H `"Metadata:true`"" : ""
            $resp = & curl.exe -s -m 3 -i @($hdr) $Url 2>$null
            if (-not $resp) { return "HTTP status: 000, body-bytes: 0" }
            $status = ($resp -split "`n")[0] -replace "HTTP/\S+\s+",""
            $code = ($status -split "\s+")[0]
            $body = ($resp -split "`n",2)[1]
            $len  = [Text.Encoding]::UTF8.GetByteCount($body)
            return "HTTP status: $code, body-bytes: $len"
          }

          $lines = @()
          $lines += "### Instance metadata (first ~30 lines)"
          try {
            $inst = & curl.exe -s -m 3 -H "Metadata:true" $urlInstance
            if ($inst) { $lines += ($inst -split "`n")[0..([Math]::Min(29,($inst -split "`n").Count-1))] }
            else { $lines += "No IMDS (instance)"; }
          } catch { $lines += "No IMDS (instance)"; }

          $lines += ""
          $lines += "### Token endpoint STATUS ONLY (with header)"
          $lines += (CurlStatus $urlToken $true)
          $lines += "### Token endpoint STATUS ONLY (without header; should fail)"
          $lines += (CurlStatus $urlToken $false)

          $lines -join "`r`n" | Set-Content -Path artifacts\win-imds.txt -Encoding UTF8

    # NEW: Windows egress posture check (status-only)
    - task: PowerShell@2
      displayName: Egress posture check (Windows; status-only)
      inputs:
        targetType: inline
        script: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $out = "artifacts\egress-windows.txt"
          if (Test-Path $out) { Remove-Item $out -Force }
          function Check([string]$Url, [string]$Note) {
            $res = & curl.exe -s -m 5 -o NUL -w "code=%{http_code} bytes=%{size_download} time=%{time_total}" $Url 2>$null
            if (-not $res) { $res = "code=000 bytes=0 time=0" }
            "$('{0,-40}' -f $Note) | $res" | Add-Content -Path $out -Encoding UTF8
          }
          Check "https://management.azure.com/" "HTTPS mgmt endpoint"
          Check "https://example.com/"          "HTTPS example.com"
          Check "http://1.1.1.1"                "HTTP to 1.1.1.1"
          Check "http://169.254.169.254/"       "HTTP IMDS root (no header)"

    - task: PublishBuildArtifacts@1
      displayName: Publish recon artifacts (Windows)
      inputs:
        PathtoPublish: 'artifacts'
        ArtifactName: 'azure-recon-windows'
        publishLocation: 'Container'
