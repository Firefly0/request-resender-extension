# azure-pipelines.yml
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

stages:
- stage: ReconLinux
  displayName: Linux VM probes (deep safe)
  jobs:
  - job: linux_recon
    displayName: Linux VM probes
    steps:
    - checkout: self
    - task: Bash@3
      displayName: Install tools
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "### Install tools"
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -qq \
            nmap netcat-openbsd curl jq dnsutils redis-tools whois

    - task: Bash@3
      displayName: Discover subnet & gateway
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          SUBNET=$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')
          GW=$(ip route | awk '/default/ {print $3}' | head -n1)
          mkdir -p artifacts
          {
            echo "Discovered subnet: ${SUBNET:-unknown}"
            echo "Default gateway: ${GW:-unknown}"
          } | tee artifacts/net-basics.txt

    - task: Bash@3
      displayName: Neighbor/route/DNS view (local only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          {
            echo "### ip neigh"
            ip neigh || true
            echo
            echo "### ip route"
            ip route || true
            echo
            echo "### resolv.conf (first 50 lines)"
            sed -n '1,50p' /etc/resolv.conf || true
            echo
            echo "### hosts (first 80 lines)"
            sed -n '1,80p' /etc/hosts || true
            echo
            echo "### hostname -f"
            hostname -f || true
          } > artifacts/local-network-view.txt

    - task: Bash@3
      displayName: Focused network scan (expanded targets)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          SUBNET=$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')
          mkdir -p artifacts
          # add higher-value internal ports
          PORTS="22,80,443,3306,5432,5601,5672,15672,2375,2376,2379,2380,5000,8080,8081,8500,8443,9200,9300,10250,10255,3000,50070"
          echo "Scanning ${SUBNET} on {${PORTS}}..." | tee artifacts/scan.txt
          nmap -T4 -Pn --open -p "$PORTS" "$SUBNET" -oG artifacts/scan.gnmap || true
          # Summaries
          echo "---- Open hosts summary ----" | tee -a artifacts/scan.txt
          awk '/Ports: /{print $2" "$0}' artifacts/scan.gnmap | tee -a artifacts/scan.txt

    - task: Bash@3
      displayName: HTTP header & CORS/OPTIONS probe (first HTTP service only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          HOST=$(grep -E ' (80|443|8080|8081|8443)/open' artifacts/scan.gnmap | awk '{print $2}' | head -n1 || true)
          if [ -n "${HOST:-}" ]; then
            {
              echo "Target: $HOST"
              echo "--- HEAD http://$HOST/ (5s)"
              curl -sS -I --max-time 5 "http://$HOST/" | head -n 40 || true
              echo
              echo "--- OPTIONS http://$HOST/ (CORS check)"
              curl -sS -X OPTIONS -I --max-time 5 "http://$HOST/" | grep -Ei 'access-control-allow|allow:|server:' || true
              echo
              echo "--- HEAD https://$HOST/ (if TLS terminates)"
              curl -sS -I -k --max-time 5 "https://$HOST/" | head -n 40 || true
            } > artifacts/http-headers-cors.txt
          else
            echo "No HTTP-ish hosts found." | tee artifacts/http-headers-cors.txt
          fi

    - task: Bash@3
      displayName: Azure IMDS probe (read-only)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          (curl -s -m 3 -H "Metadata:true" \
            "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | head -n 50 \
            || echo "No Azure IMDS (good).") > artifacts/imds-azure.txt

    - task: Bash@3
      displayName: Conditional service pings (Redis, Elasticsearch, Kubelet…)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          SCAN="artifacts/scan.gnmap"
          mkdir -p artifacts
          {
            echo "### Redis PING"
            for H in $(awk '/6379\/open/{print $2}' "$SCAN"); do
              echo "PING $H:6379"
              (redis-cli -h "$H" ping || true) | sed 's/^/  /'
            done
            [ "$(awk '/6379\/open/{print $2}' "$SCAN" | wc -l)" -gt 0 ] || echo "No Redis found."

            echo
            echo "### Elasticsearch version header (HEAD only)"
            for H in $(awk '/9200\/open/{print $2}' "$SCAN"); do
              echo "HEAD http://$H:9200/"
              curl -sS -I --max-time 5 "http://$H:9200/" | grep -Ei 'x-elastic|server:|www-authenticate' || true
            done
            [ "$(awk '/9200\/open/{print $2}' "$SCAN" | wc -l)" -gt 0 ] || echo "No ES found."

            echo
            echo "### Kubelet read-only port check (10255) + secure (10250) headers"
            for H in $(awk '/10255\/open|10250\/open/{print $2}' "$SCAN"); do
              echo "HEAD http://$H:10255/ or https://$H:10250/"
              curl -sS -I --max-time 5 "http://$H:10255/" | head -n 10 || true
              curl -sS -k -I --max-time 5 "https://$H:10250/" | head -n 10 || true
            done

            echo
            echo "### Jenkins/SonarQube/Vault headers (if present)"
            for PORT in 8080 8081 8443 8200; do
              for H in $(awk -v p="$PORT" '$0 ~ p"/open" {print $2}' "$SCAN"); do
                echo "HEAD $H:$PORT"
                curl -sS -I -k --max-time 5 "http://$H:$PORT/" | grep -Ei 'jenkins|sonarqube|vault|server:|www-authenticate' || true
              done
            done
          } > artifacts/service-pings.txt

    - task: Bash@3
      displayName: Reverse DNS sweep (PTR of local /24 slice)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts
          SUBNET=$(ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}')
          if [ -n "${SUBNET:-}" ]; then
            NET=$(echo "$SUBNET" | cut -d/ -f1 | awk -F. '{print $1"."$2"."$3}')
            echo "PTR sweep of ${NET}.0/24 (first 64 hosts)" | tee artifacts/ptr.txt
            for i in $(seq 1 64); do
              ip="${NET}.${i}"
              host "$ip" | sed "s/^/${ip} -> /" || true
            done >> artifacts/ptr.txt
          else
            echo "No subnet; skipping PTR sweep." | tee artifacts/ptr.txt
          fi

    - task: Bash@3
      displayName: Prepare artifacts
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "Collecting artifacts…"
          ls -lah artifacts || true
          echo "Done."

    - task: PublishBuildArtifacts@1
      displayName: Publish recon artifacts
      inputs:
        PathtoPublish: 'artifacts'
        ArtifactName: 'azure-recon-linux'
        publishLocation: 'Container'

# Windows parity (gateway reachability + local intel)
- stage: ReconWindows
  displayName: Windows VM gateway probe
  pool:
    vmImage: 'windows-2022'
  jobs:
  - job: win_probe
    steps:
    - checkout: self
    - task: PowerShell@2
      displayName: Gateway probe (80/443/5000/8080)
      inputs:
        targetType: inline
        script: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $gw = (Get-NetRoute -DestinationPrefix "0.0.0.0/0" | Sort-Object RouteMetric | Select-Object -First 1).NextHop
          "Gateway: $gw" | Tee-Object -FilePath artifacts\win-gateway.txt
          foreach ($p in 80,443,5000,8080) {
            $res = Test-NetConnection -ComputerName $gw -Port $p -WarningAction SilentlyContinue
            $state = if ($res.TcpTestSucceeded) { "open" } else { "closed" }
            "$state:$p" | Tee-Object -FilePath artifacts\win-gateway.txt -Append
          }

    - task: PowerShell@2
      displayName: Local routes/ARP/DNS (Windows)
      inputs:
        targetType: inline
        script: |
          $o = @()
          $o += "### route print"
          $o += (route print | Out-String)
          $o += "`n### arp -a"
          $o += (arp -a | Out-String)
          $o += "`n### DNS servers"
          $o += (Get-DnsClientServerAddress | Format-Table -AutoSize | Out-String)
          $o -join "`n" | Set-Content -Path artifacts\win-local.txt -Encoding UTF8

    - task: PublishBuildArtifacts@1
      displayName: Publish Windows probe artifacts
      inputs:
        PathtoPublish: 'artifacts'
        ArtifactName: 'azure-recon-windows'
        publishLocation: 'Container'
